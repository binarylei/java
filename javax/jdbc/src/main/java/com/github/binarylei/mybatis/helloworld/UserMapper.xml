<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.binarylei.mybatis.helloworld.UserMapper">

    <!--eviction: 緩存的回收策路。
            LRU  默认，最近最少使用的：移除最长时间不被使用的对象。
            FTFO 先进先出：按对家进入缓存的顺序来移除它们。
            SOFT 软引用：移除基于垃圾回收器状态和软引用规则的对象。
            WEAK 弱引用：更积极地移除基于拉圾收集器状态和弱引用规则。
        flushInterval: 存刷新间隔缓存多长时间清空一次，默认不清空，设置一个毫秒值。
        readon1y: 是否只读 true。
            true: mybatis 直接就会将数据在存中的引用交给用户。不安全，速度快
            fa1se: mybatis 会利用反序列的技术克隆一份新的数据给你。安全，速度慢
        size: 缓存存放多少元素
        tvpe: 指定自定义存的全类名实现 Cache接口即可
    -->
    <cache eviction="LRU" flushInterval="1000" readOnly="false" size="20"/>

    <insert id="save" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into user(name,age,sex) values(#{name},#{age},#{sex})
    </insert>

    <insert id="save2" parameterType="user">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(name,age,sex) values(#{name},#{age},#{sex})
    </insert>

    <select id="getUsers" resultType="User" useCache="false">
        select * from user;
    </select>

    <select id="getUser" resultType="User" useCache="false" flushCache="false">
        select * from user where id=#{564654id};
    </select>

    <update id="updateUser">
        update user set name=#{name} where id=#{id}
    </update>

    <select id="getUser2" resultType="User">
        <!--select * from user where id=#{0} and name=#{1};-->
        <!--select * from user where id=#{param1} and name=#{param2};-->
        <!--select * from user where id=#{0} and name=#{param2};-->
        select * from user where id=#{id} and name=#{param2};
    </select>

    <select id="getUser4" resultType="User">
        select * from user where id=#{id} and name=#{name};
    </select>

    <select id="getUsers2" resultType="User">
        select * from user;
    </select>

    <select id="getUsers3" resultType="User">
        select * from user;
    </select>


    <resultMap id="myMap1" type="User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </resultMap>
    <select id="getUsers4" resultMap="myMap1">
        select * from user;
    </select>

    <resultMap id="myMap2" type="User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="dept.id" column="did"/>
        <result property="dept.name" column="dname"/>
    </resultMap>
    <select id="getUsers5" resultMap="myMap2">
        select u.id, u.name, u.did, d.name dname from user u, dept d where u.did=d.id;
    </select>

    <resultMap id="myMap6" type="User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <association property="dept" javaType="DePartment">
            <result property="id" column="did"/>
            <result property="name" column="dname"/>
        </association>
    </resultMap>
    <select id="getUsers6" resultMap="myMap6">
        select u.id, u.name, u.did, d.name dname from user u, dept d where u.did=d.id;
    </select>

    <resultMap id="myMap7" type="User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <association property="dept" javaType="DePartment" select="getDept" column="id"/>
    </resultMap>
    <select id="getUsers7" resultMap="myMap7">
        select id, name from user;
    </select>
    <select id="getDept" resultType="DePartment">
        select id, name from dept where id=#{id};
    </select>

    <resultMap id="myMap8" type="DePartment">
        <id property="id" column="did"/>
        <result property="name" column="dname"/>
        <collection property="users" ofType="User">
            <result property="id" column="id"/>
            <result property="name" column="name"/>
        </collection>
    </resultMap>
    <select id="getDept8" resultMap="myMap8">
        select u.id, u.name, u.did, d.name dname from user u, dept d where u.did=d.id;
    </select>

    <resultMap id="myMap9" type="DePartment">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <collection property="users" ofType="User" select="getUsers9" column="id" fetchType="eager"/>
    </resultMap>
    <select id="getUsers9" resultType="User">
        select id, name from user where did=#{did};
    </select>
    <select id="getDept9" resultMap="myMap9">
        select id, name from dept;
    </select>

    <!-- foreach 元素
        collection: 要遍历的集合,可以是 Collection 也可以是 Map
        index: Collection 时为索引值 0,1,2...; Map 时为 key 值
        item: Collection 时为元素对象; Map 时为 value 值
        open: 前缀
        close: 后缀
        separator: 连接符
    -->
    <select id="getUsers10" resultType="User">
        select id, name from user
        <foreach collection="ids" item="id" index="index" open="where id in (" close=")" separator=",">
            #{id}
        </foreach>
    </select>

  <!--  <select id="getUsers11" resultType="User">
        <bind name="_name" value="'%'+name+'%'"/>
        select id, name from user where name like #{_name};
    </select>-->

    <select id="getUsers11" resultType="User">
        select id, name from user
        <include refid="mySql"/>
    </select>

    <sql id="mySql">
        <where>
            and name=#{name}
        </where>
    </sql>
</mapper>